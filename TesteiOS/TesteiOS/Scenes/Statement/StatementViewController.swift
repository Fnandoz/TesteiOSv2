//
//  StatementViewController.swift
//  TesteiOS
//
//  Created by Fernando Gomes on 15/06/19.
//  Copyright (c) 2019 Fernando Gomes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementDisplayLogic: class
{
  func updateViews(viewModel: Statements.get.ViewModel)
}

class StatementViewController: UIViewController, StatementDisplayLogic {
    var interactor: StatementBusinessLogic?
    var router: (NSObjectProtocol & StatementRoutingLogic & StatementDataPassing)?
    var repository: UserRepository?

    var statements: [Statement] = [] {
        didSet {
            DispatchQueue.main.async {
                self.statementsTableView.reloadData()
            }
        }
    }
    
    
    


  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = StatementInteractor()
    let presenter = StatementPresenter()
    let router = StatementRouter()
    let repository = UserRepository.shared
    
    viewController.interactor = interactor
    viewController.router = router
    viewController.repository = repository
    interactor.presenter = presenter
    interactor.userRepository = repository
    presenter.viewController = viewController
    presenter.repository = repository
    router.viewController = viewController
    router.dataStore = interactor
    
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var accountLabel: UILabel!
    @IBOutlet weak var balanceLabel: UILabel!
    @IBOutlet weak var statementsTableView: UITableView!
    
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupTableView()
    loadStatements()
    
  }
  
  // MARK: Do something
   
    func setupTableView() {
        let nib = UINib(nibName: "StatementTableViewCell", bundle: nil)
        statementsTableView.register(nib, forCellReuseIdentifier: StatementTableViewCell.identifier)
        statementsTableView.dataSource = self
        statementsTableView.delegate = self
    }
  
    func updateViews(viewModel: Statements.get.ViewModel) {
        
    let userAccount = viewModel.userAccount!
    statements = viewModel.statements!
    nameLabel.text = userAccount.name
        accountLabel.text = userAccount.agency + " / " + userAccount.bankAccount.bankAccountFormatter()
    balanceLabel.text = userAccount.balance.changeCurrency()!

    }
    
    func loadStatements() {
        interactor?.updateStatementList()
    }
}

extension StatementViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let statement = statements[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "statementCell") as! StatementTableViewCell
        cell.setStatement(statement: statement)
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statements.count
    }
}
